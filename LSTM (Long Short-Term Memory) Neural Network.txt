import numpy as np
from keras.models import Sequential
from keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler
from datetime import datetime, timedelta

# Generate synthetic weather data for demonstration
np.random.seed(42)
days = 30
dates = [datetime(2024, 1, 1) + timedelta(days=i) for i in range(days)]
temperatures = np.random.randint(0, 30, days)

# Normalize data
scaler = MinMaxScaler(feature_range=(0, 1))
temperatures_normalized = scaler.fit_transform(np.array(temperatures).reshape(-1, 1))

# Prepare data for LSTM
X, y = [], []
for i in range(len(temperatures_normalized) - 7):
    X.append(temperatures_normalized[i:i+7])
    y.append(temperatures_normalized[i+7])

X, y = np.array(X), np.array(y)

# Reshape input for LSTM
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Create and train the LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(LSTM(units=50, return_sequences=True))
model.add(LSTM(units=50))
model.add(Dense(units=1))
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X, y, epochs=100, batch_size=1)

# Predict temperatures for the next 7 days
future_data = temperatures_normalized[-7:]
future_data = np.reshape(future_data, (1, 7, 1))
future_predictions_normalized = model.predict(future_data)
future_predictions = scaler.inverse_transform(future_predictions_normalized)

# Plot the results
plt.plot(dates, temperatures, label="Actual Temperatures")
future_dates = [dates[-1] + timedelta(days=i) for i in range(1, 8)]
plt.plot(future_dates, future_predictions.flatten(), label="Predicted Temperatures (Next 7 Days - LSTM)")
plt.xlabel("Date")
plt.ylabel("Temperature (Â°C)")
plt.title("Weather Prediction for the Next 7 Days (LSTM)")
plt.legend()
plt.show()
